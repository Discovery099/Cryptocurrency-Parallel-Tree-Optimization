// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BenchmarkRun {
  id              String   @id @default(cuid())
  name            String?
  description     String?
  transactionSize Int
  config          Json     // Algorithm configuration as JSON
  metrics         Json     // Performance metrics as JSON
  timestamp       DateTime @default(now())
  duration        Float    // Duration in milliseconds
  status          RunStatus @default(COMPLETED)
  errorMessage    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  performanceMetrics PerformanceMetrics[]
  
  @@map("benchmark_runs")
}

model MerkleComputation {
  id              String   @id @default(cuid())
  transactionCount Int
  merkleRoot      String
  treeLevels      Int
  leafCount       Int
  config          Json     // Algorithm configuration as JSON
  metrics         Json     // Performance metrics as JSON
  timestamp       DateTime @default(now())
  duration        Float    // Duration in milliseconds
  status          RunStatus @default(COMPLETED)
  errorMessage    String?
  treeData        Json?    // Optional tree structure data
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  performanceMetrics PerformanceMetrics[]
  
  @@map("merkle_computations")
}

model AlgorithmConfig {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String?
  config          Json     // Full configuration as JSON
  isPreset        Boolean  @default(false)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("algorithm_configs")
}

model PerformanceMetrics {
  id              String   @id @default(cuid())
  benchmarkRunId  String?
  computationId   String?
  metricName      String
  metricValue     Float
  unit            String?
  category        MetricCategory @default(PERFORMANCE)
  timestamp       DateTime @default(now())
  
  benchmarkRun    BenchmarkRun?  @relation(fields: [benchmarkRunId], references: [id])
  computation     MerkleComputation? @relation(fields: [computationId], references: [id])

  @@map("performance_metrics")
}

model SystemInfo {
  id              String   @id @default(cuid())
  cpuCores        Int
  totalMemory     Int      // in MB
  availableMemory Int      // in MB
  gpuInfo         Json?    // GPU information as JSON
  platform        String   // OS platform
  architecture    String   // CPU architecture
  timestamp       DateTime @default(now())
  
  @@map("system_info")
}

enum RunStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum MetricCategory {
  PERFORMANCE
  MEMORY
  EFFICIENCY
  ACCURACY
  RESOURCE
}